import tkinter as tk
from tkinter import messagebox

# کلاس کتاب
class Book:
    def __init__(self, title, author, genre):
        self.title = title
        self.author = author
        self.genre = genre
        self.is_borrowed = False

    def __str__(self):
        status = "Available" if not self.is_borrowed else "Borrowed"
        return f"'{self.title}' by {self.author} ({self.genre}) - {status}"

# کلاس کتابخانه
class Library:
    def __init__(self):
        self.books = []

    def add_book(self, book):
        self.books.append(book)

    def display_books(self):
        return "\n".join([str(book) for book in self.books])

    def borrow_book(self, title):
        for book in self.books:
            if book.title.lower() == title.lower():
                if not book.is_borrowed:
                    book.is_borrowed = True
                    return f"You have borrowed '{book.title}'."
                else:
                    return f"'{book.title}' is already borrowed."
        return f"Book '{title}' not found in the library."

    def return_book(self, title):
        for book in self.books:
            if book.title.lower() == title.lower():
                if book.is_borrowed:
                    book.is_borrowed = False
                    return f"Book '{book.title}' has been returned."
                else:
                    return f"'{book.title}' was not borrowed."
        return f"Book '{title}' not found in the library."

# کلاس رابط کاربری
class LibraryApp:
    def __init__(self, root, library):
        self.root = root
        self.root.title("Library Management System")
        self.library = library

        # Frame for adding book
        self.add_frame = tk.Frame(self.root)
        self.add_frame.pack(pady=10)

        self.title_label = tk.Label(self.add_frame, text="Title:")
        self.title_label.grid(row=0, column=0)
        self.title_entry = tk.Entry(self.add_frame)
        self.title_entry.grid(row=0, column=1)

        self.author_label = tk.Label(self.add_frame, text="Author:")
        self.author_label.grid(row=1, column=0)
        self.author_entry = tk.Entry(self.add_frame)
        self.author_entry.grid(row=1, column=1)

        self.genre_label = tk.Label(self.add_frame, text="Genre:")
        self.genre_label.grid(row=2, column=0)
        self.genre_entry = tk.Entry(self.add_frame)
        self.genre_entry.grid(row=2, column=1)

        self.add_button = tk.Button(self.add_frame, text="Add Book", command=self.add_book)
        self.add_button.grid(row=3, column=0, columnspan=2, pady=10)

        # Frame for displaying books
        self.display_button = tk.Button(self.root, text="Show Books", command=self.show_books)
        self.display_button.pack(pady=10)

        # Frame for borrow/return book
        self.borrow_return_frame = tk.Frame(self.root)
        self.borrow_return_frame.pack(pady=10)

        self.borrow_label = tk.Label(self.borrow_return_frame, text="Book Title to Borrow/Return:")
        self.borrow_label.grid(row=0, column=0)
        self.borrow_entry = tk.Entry(self.borrow_return_frame)
        self.borrow_entry.grid(row=0, column=1)

        self.borrow_button = tk.Button(self.borrow_return_frame, text="Borrow Book", command=self.borrow_book)
        self.borrow_button.grid(row=1, column=0, pady=5)

        self.return_button = tk.Button(self.borrow_return_frame, text="Return Book", command=self.return_book)
        self.return_button.grid(row=1, column=1, pady=5)

    def add_book(self):
        title = self.title_entry.get()
        author = self.author_entry.get()
        genre = self.genre_entry.get()

        if title and author and genre:
            book = Book(title, author, genre)
            self.library.add_book(book)
            messagebox.showinfo("Success", f"Book '{title}' added successfully!")
            self.clear_entries()
        else:
            messagebox.showerror("Error", "Please fill all fields.")

    def show_books(self):
        books = self.library.display_books()
        if books:
            messagebox.showinfo("Books in Library", books)
        else:
            messagebox.showinfo("No Books", "No books available in the library.")

    def borrow_book(self):
        title = self.borrow_entry.get()
        if title:
            result = self.library.borrow_book(title)
            messagebox.showinfo("Borrow Book", result)
            self.borrow_entry.delete(0, tk.END)
        else:
            messagebox.showerror("Error", "Please enter a book title.")

    def return_book(self):
        title = self.borrow_entry.get()
        if title:
            result = self.library.return_book(title)
            messagebox.showinfo("Return Book", result)
            self.borrow_entry.delete(0, tk.END)
        else:
            messagebox.showerror("Error", "Please enter a book title.")

    def clear_entries(self):
        self.title_entry.delete(0, tk.END)
        self.author_entry.delete(0, tk.END)
        self.genre_entry.delete(0, tk.END)

# اجرای برنامه
if __name__ == "__main__":
    library = Library()
    root = tk.Tk()
    app = LibraryApp(root, library)
    root.mainloop()
